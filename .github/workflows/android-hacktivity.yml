name: üì± Android HackerOne Reports

on:
  workflow_dispatch:  # manual trigger
  schedule:
    - cron: '0 12 * * *'  # runs every day at 12:00 UTC

jobs:
  scrape-android-reports:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to access all branches


    - name: Test write
      env:
      GIT_AUTH_TOKEN: ${{ secrets.GITHUBTOKEN }}
    run: |
      git config --global user.email "actions@github.com"
      git config --global user.name "GitHub Actions"
  
      echo "Hello" > test.txt
      git checkout -B data-store
      git add test.txt
      git commit -m "Test commit"
      git remote set-url origin https://x-access-token:${GIT_AUTH_TOKEN}@github.com/${{ github.repository }}
      git push origin data-store --force


    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: üì¶ Install dependencies
      run: |
        pip install selenium webdriver-manager beautifulsoup4 requests pandas

    - name: üß© Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: üì• Fetch Existing SQLite DB from data-store branch
      run: |
        git fetch origin data-store || echo "No data-store branch yet"
        git checkout origin/data-store -- android_reports.db || echo "No existing DB file yet"

    - name: üï∑Ô∏è Run Scraper
      run: |
        python scrape.py

    - name: üìä Check if new data was added to SQLite
      id: check_new
      run: |
        if [ -f android_reports.db ]; then
          count=$(sqlite3 android_reports.db "SELECT COUNT(*) FROM reports WHERE date(date) = date('now');")
          echo "New reports today: $count"
          if [ "$count" -gt 0 ]; then
            echo "new_data=true" >> $GITHUB_OUTPUT
            echo "$count" > new-found.flag
          else
            echo "new_data=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "new_data=false" >> $GITHUB_OUTPUT
        fi

    - name: üîî Send Slack Notification
      if: steps.check_new.outputs.new_data == 'true'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        COUNT=$(cat new-found.flag)
        MESSAGE="üì± *$COUNT* new Android vulnerability disclosures found on HackerOne!\n‚û°Ô∏è Check reports: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          "$SLACK_WEBHOOK_URL"

    - name: üíæ Commit updated DB to data-store branch
      env:
        GIT_AUTH_TOKEN: ${{ secrets.GITHUBTOKEN }}
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

        git checkout -B data-store
        git add android_reports.db
        git commit -m "üì¶ Update DB: $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"

        # Use the PAT to push
        git remote set-url origin https://x-access-token:${GIT_AUTH_TOKEN}@github.com/${{ github.repository }}
        git push origin data-store --force



    - name: üßπ Clean up
      run: |
        rm -f new-found.flag
