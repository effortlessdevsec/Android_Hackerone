name: 📱 Android HackerOne Reports

on:
  workflow_dispatch:  # manual trigger
  schedule:
    - cron: '0 12 * * *'  # runs every day at 12:00 UTC

jobs:
  scrape-android-reports:
    runs-on: ubuntu-latest

    steps:

    
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to access all branches

    - name: Make script executable
      run: chmod +x ./slack_notify.sh


    - name: 🐍 listing
      run: |
          ls

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install dependencies
      run: |
        pip install selenium webdriver-manager beautifulsoup4 requests pandas

    - name: 🧩 Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: 📥 Fetch Existing android-report.json from main branch (if exists)
      run: |
        # Check if android-reports.json exists in the repository
        if [ -f android-reports.json ]; then
          # Rename the existing file to old-android-report.json
          mv android-reports.json old-android-reports.json
          echo "Renamed existing android-report.json to old-android-report.json"
        else
          # Print message if file is not found
          echo "android-reports.json file not found"
        fi



    - name: 🕷️ Run Scraper
      run: |
        python scrape.py

    - name: 📊 Compare with Existing Data and Check for New Vulnerabilities
      id: compare
      run: |
          # Compare newly scraped vulnerabilities with the json data
          if [ -f android-reports.json ] && [ -f old-android-reports.json ]; then
            # Compare both files for differences and extract new vulnerabilities
            new_vulnerabilities=$(jq -s '.[0] - .[1]' android-reports.json old-android-reports.json)
  
            # If there are any new vulnerabilities, send them to Slack
            if [ "$(echo "$new_vulnerabilities" | jq length)" -gt 0 ]; then
              echo "new_data=true" >> $GITHUB_OUTPUT
              echo "$new_vulnerabilities" > new-found.json
              cat new-found.json
               echo "New vulnerabilities found and saved in new-found.json"
            else
              echo "new_data=false" >> $GITHUB_OUTPUT
               echo "No New vulnerabilities found"
            fi
          else
            echo "new_data=false" >> $GITHUB_OUTPUT
            echo "No New vulnerabilities found"

          fi

    - name: Send Slack Notification
      run: |
        WEBHOOK_URL="${{ secrets.WEBHOOK_URL }}" ./slack_notify.sh


    - name: 💾 Commit updated android-report.json and README.md to main branch using GitHub API
      env:
        GIT_AUTH_TOKEN: ${{ secrets.GITHUBTOKEN }}
      run: |
        REPO="${{ github.repository }}"
        BRANCH="main"
    
        ########## Update android-report.json ##########
        FILE_PATH_JSON="android-report.json"
        COMMIT_MSG_JSON="📦 Update android-report.json: $(date '+%Y-%m-%d %H:%M:%S')"
        BASE64_JSON=$(base64 -w 0 android-reports.json)
    
        RESPONSE_JSON=$(curl -s -H "Authorization: token $GIT_AUTH_TOKEN" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH_JSON?ref=$BRANCH)
        SHA_JSON=$(echo "$RESPONSE_JSON" | jq -r .sha)
    
        if [ "$SHA_JSON" != "null" ]; then
          echo "📄 android-report.json exists. Updating it."
          JSON_PAYLOAD_JSON=$(jq -n \
            --arg msg "$COMMIT_MSG_JSON" \
            --arg content "$BASE64_JSON" \
            --arg branch "$BRANCH" \
            --arg sha "$SHA_JSON" \
            '{message: $msg, content: $content, branch: $branch, sha: $sha}')
        else
          echo "🆕 android-report.json not found. Creating new one."
          JSON_PAYLOAD_JSON=$(jq -n \
            --arg msg "$COMMIT_MSG_JSON" \
            --arg content "$BASE64_JSON" \
            --arg branch "$BRANCH" \
            '{message: $msg, content: $content, branch: $branch}')
        fi
    
        curl -s -X PUT \
          -H "Authorization: token $GIT_AUTH_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD_JSON" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH_JSON
    
        ########## Update README.md ##########
        FILE_PATH_MD="README.md"
        DATE=$(date '+%Y-%m-%d')
        NEW_REPORT_COUNT=$(jq '.new_reports | length' android-reports.json)
        README_CONTENT="## Android HackerOne Reports as of $DATE\n### New Vulnerabilities: $NEW_REPORT_COUNT\nDetails of the new vulnerabilities can be found in the [android-report.json](android-report.json).\n"
        BASE64_MD=$(echo -e "$README_CONTENT" | base64 -w 0)
        COMMIT_MSG_MD="📝 Update README.md: $DATE"
    
        RESPONSE_MD=$(curl -s -H "Authorization: token $GIT_AUTH_TOKEN" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH_MD?ref=$BRANCH)
        SHA_MD=$(echo "$RESPONSE_MD" | jq -r .sha)
    
        if [ "$SHA_MD" != "null" ]; then
          echo "📄 README.md exists. Updating it."
          JSON_PAYLOAD_MD=$(jq -n \
            --arg msg "$COMMIT_MSG_MD" \
            --arg content "$BASE64_MD" \
            --arg branch "$BRANCH" \
            --arg sha "$SHA_MD" \
            '{message: $msg, content: $content, branch: $branch, sha: $sha}')
        else
          echo "🆕 README.md not found. Creating new one."
          JSON_PAYLOAD_MD=$(jq -n \
            --arg msg "$COMMIT_MSG_MD" \
            --arg content "$BASE64_MD" \
            --arg branch "$BRANCH" \
            '{message: $msg, content: $content, branch: $branch}')
        fi
    
        curl -s -X PUT \
          -H "Authorization: token $GIT_AUTH_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD_MD" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH_MD
    
       
    - name: 📜 Update README.md with Latest Report Information
      run: |
        DATE=$(date '+%Y-%m-%d')
        NEW_REPORT_COUNT=$(jq '.new_reports | length' android-reports.json)
        
        # Update README.md with the latest report information
        echo "## Android HackerOne Reports as of $DATE" >> README.md
        echo "### New Vulnerabilities: $NEW_REPORT_COUNT" >> README.md
        echo "Details of the new vulnerabilities can be found in the [android-report.json](android-report.json)." >> README.md
        echo "" >> README.md

    - name: 💾 Commit updated README.md to main branch
      env:
        GIT_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        COMMIT_MSG="📚 Update README.md with latest Android vulnerability report: $(date '+%Y-%m-%d %H:%M:%S')"
        git add README.md
        git commit -m "$COMMIT_MSG"
        git push origin main
