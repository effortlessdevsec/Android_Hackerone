name: 📱 Android HackerOne Reports

on:
  workflow_dispatch:  # manual trigger
  schedule:
    - cron: '0 12 * * *'  # runs every day at 12:00 UTC

jobs:
  scrape-android-reports:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to access all branches

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install dependencies
      run: |
        pip install selenium webdriver-manager beautifulsoup4 requests pandas

    - name: 🧩 Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: 📥 Fetch Existing android-report.json from main branch (if exists)
      run: |
        REPO="${{ github.repository }}"
        FILE_PATH="android-report.json"
        BRANCH="main"  # Push to the main branch

        # Fetch file content from GitHub API
        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH?ref=$BRANCH)

        SHA=$(echo "$RESPONSE" | jq -r .sha)

        if [ "$SHA" != "null" ]; then
          echo "File found, downloading..."
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r .download_url)
          curl -s -L $DOWNLOAD_URL -o $FILE_PATH
        else
          echo "File not found, proceeding without android-report.json."
        fi

    - name: 🕷️ Run Scraper
      run: |
        python scrape.py

    - name: 💾 Commit updated android-report.json to main branch using GitHub API
      env:
        GIT_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Encode the JSON file to base64
        BASE64_JSON=$(base64 -w 0 android-report.json)

        COMMIT_MSG="📦 Update android-report.json: $(date '+%Y-%m-%d %H:%M:%S')"
        REPO="${{ github.repository }}"
        FILE_PATH="android-report.json"
        BRANCH="main"  # Use the main branch here

        # Fetch the SHA if the file already exists
        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH?ref=$BRANCH)
        SHA=$(echo "$RESPONSE" | jq -r .sha)

        # If the file doesn't exist, create it
        if [ "$SHA" == "null" ]; then
          echo "File not found, creating new file."
        fi

        # Create the JSON payload for the GitHub API
        JSON=$(jq -n \
          --arg msg "$COMMIT_MSG" \
          --arg content "$BASE64_JSON" \
          --arg branch "$BRANCH" \
          '{message: $msg, content: $content, branch: $branch}')

        curl -X PUT \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "$JSON" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH

    - name: 📊 Compare with Existing Data and Check for New Vulnerabilities
      id: compare
      run: |
        # Compare newly scraped vulnerabilities with the json data
        if [ -f android-report.json ]; then
          # Assuming the `scrape.py` adds vulnerabilities to the json file (e.g., `new_reports`)
          new_reports_count=$(jq '.new_reports | length' android-report.json)
          echo "New vulnerabilities found: $new_reports_count"

          if [ "$new_reports_count" -gt 0 ]; then
            echo "new_data=true" >> $GITHUB_OUTPUT
            echo "$new_reports_count" > new-found.flag
          else
            echo "new_data=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "new_data=false" >> $GITHUB_OUTPUT
        fi

    - name: 🔔 Send Slack Notification if New Vulnerabilities Found
      if: steps.compare.outputs.new_data == 'true'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        COUNT=$(cat new-found.flag)
        MESSAGE="📱 *$COUNT* new Android vulnerability disclosures found on HackerOne!\n➡️ Check reports: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          "$SLACK_WEBHOOK_URL"

    - name: 📜 Update README.md with Latest Report Information
      run: |
        DATE=$(date '+%Y-%m-%d')
        NEW_REPORT_COUNT=$(jq '.new_reports | length' android-report.json)
        
        # Update README.md with the latest report information
        echo "## Android HackerOne Reports as of $DATE" >> README.md
        echo "### New Vulnerabilities: $NEW_REPORT_COUNT" >> README.md
        echo "Details of the new vulnerabilities can be found in the [android-report.json](android-report.json)." >> README.md
        echo "" >> README.md

    - name: 💾 Commit updated README.md to main branch
      env:
        GIT_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        COMMIT_MSG="📚 Update README.md with latest Android vulnerability report: $(date '+%Y-%m-%d %H:%M:%S')"
        git add README.md
        git commit -m "$COMMIT_MSG"
        git push origin main
