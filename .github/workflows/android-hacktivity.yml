name: 📱 Android HackerOne Reports

on:
  workflow_dispatch:  # manual trigger
  schedule:
    - cron: '0 12 * * *'  # runs every day at 12:00 UTC

jobs:
  scrape-android-reports:
    runs-on: ubuntu-latest

    steps:

    - name: Postd blocks to a Slack channel
      if: always()
      uses: slackapi/slack-github-action@v2.0.0
      with:
        method: chat.postMessage
        token: ${{ secrets.WEBHOOK_URL}}
        payload: |
          {
            "channel": "${{ secrets.SECURITY_SLACK_CHANNEL_ID }}",
            "text": "hackaerone Result for ${{ matrix.repository }}: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "hello"
                }
              }
            ]
          }
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed to access all branches

    - name: 🐍 listing
      run: |
          ls

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install dependencies
      run: |
        pip install selenium webdriver-manager beautifulsoup4 requests pandas

    - name: 🧩 Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: 📥 Fetch Existing android-report.json from main branch (if exists)
      run: |
        # Check if android-reports.json exists in the repository
        if [ -f android-reports.json ]; then
          # Rename the existing file to old-android-report.json
          mv android-reports.json old-android-reports.json
          echo "Renamed existing android-report.json to old-android-report.json"
        else
          # Print message if file is not found
          echo "android-reports.json file not found"
        fi



    - name: 🕷️ Run Scraper
      run: |
        python scrape.py

    - name: 📊 Compare with Existing Data and Check for New Vulnerabilities
      id: compare
      run: |
          # Compare newly scraped vulnerabilities with the json data
          if [ -f android-reports.json ] && [ -f old-android-reports.json ]; then
            # Compare both files for differences and extract new vulnerabilities
            new_vulnerabilities=$(jq -s '.[0] - .[1]' android-reports.json old-android-reports.json)
  
            # If there are any new vulnerabilities, send them to Slack
            if [ "$(echo "$new_vulnerabilities" | jq length)" -gt 0 ]; then
              echo "new_data=true" >> $GITHUB_OUTPUT
              echo "$new_vulnerabilities" > new-found.json
               echo "New vulnerabilities found and saved in new-found.json"
            else
              echo "new_data=false" >> $GITHUB_OUTPUT
               echo "No New vulnerabilities found"
            fi
          else
            echo "new_data=false" >> $GITHUB_OUTPUT
            echo "No New vulnerabilities found"

          fi

    - name: Extract and Format Data from new-found.json
      id: format_data
      run: |
        # Read the new-found.json file and extract relevant data for Slack message
        NEW_VULNERABILITIES=$(cat new-found.json)

        # Extract the first vulnerability data (Modify according to your actual JSON structure)
        TITLE=$(echo "$NEW_VULNERABILITIES" | jq -r '.[0].title')
        SEVERITY=$(echo "$NEW_VULNERABILITIES" | jq -r '.[0].severity')
        PROGRAM=$(echo "$NEW_VULNERABILITIES" | jq -r '.[0].program')
        DATE=$(echo "$NEW_VULNERABILITIES" | jq -r '.[0].date')
        URL=$(echo "$NEW_VULNERABILITIES" | jq -r '.[0].url')

        # Format the Slack message
        SLACK_MESSAGE=$(cat <<EOF
        {
          "text": "*New Android vulnerability report*",
          "attachments": [
            {
              "title": "$TITLE",
              "text": "Severity: $SEVERITY\nProgram: $PROGRAM\nDate: $DATE\n[View Report]($URL)",
              "color": "warning"
            }
          ]
        }
        EOF
        )

        # Set the message as an environment variable for later use
        echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV

    - name: Post blocks to a Slack channel
      run: |
        # Post the formatted message to Slack
        curl -X POST -H 'Content-type: application/json' --data "${{ env.SLACK_MESSAGE }}" \
        ${{ secrets.WEBHOOK_URL }}

    

    - name: 💾 Commit updated android-report.json to main branch using GitHub API
      env:
        GIT_AUTH_TOKEN: ${{ secrets.GITHUBTOKEN }}
      run: |
        # Encode the JSON file to base64
        BASE64_JSON=$(base64 -w 0 android-reports.json)

        COMMIT_MSG="📦 Update android-report.json: $(date '+%Y-%m-%d %H:%M:%S')"
        REPO="${{ github.repository }}"
        FILE_PATH="android-report.json"
        BRANCH="main"  # Use the main branch here

        # Fetch the SHA if the file already exists
        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUBTOKEN }}" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH?ref=$BRANCH)
        SHA=$(echo "$RESPONSE" | jq -r .sha)

        # If the file doesn't exist, create it
        if [ "$SHA" == "null" ]; then
          echo "File not found, creating new file."
        fi

        # Create the JSON payload for the GitHub API
        JSON=$(jq -n \
          --arg msg "$COMMIT_MSG" \
          --arg content "$BASE64_JSON" \
          --arg branch "$BRANCH" \
          '{message: $msg, content: $content, branch: $branch}')

        curl -X PUT \
          -H "Authorization: token ${{ secrets.GITHUBTOKEN }}" \
          -H "Content-Type: application/json" \
          -d "$JSON" \
          https://api.github.com/repos/$REPO/contents/$FILE_PATH

    
    - name: 📜 Update README.md with Latest Report Information
      run: |
        DATE=$(date '+%Y-%m-%d')
        NEW_REPORT_COUNT=$(jq '.new_reports | length' android-reports.json)
        
        # Update README.md with the latest report information
        echo "## Android HackerOne Reports as of $DATE" >> README.md
        echo "### New Vulnerabilities: $NEW_REPORT_COUNT" >> README.md
        echo "Details of the new vulnerabilities can be found in the [android-report.json](android-report.json)." >> README.md
        echo "" >> README.md

    - name: 💾 Commit updated README.md to main branch
      env:
        GIT_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        COMMIT_MSG="📚 Update README.md with latest Android vulnerability report: $(date '+%Y-%m-%d %H:%M:%S')"
        git add README.md
        git commit -m "$COMMIT_MSG"
        git push origin main
